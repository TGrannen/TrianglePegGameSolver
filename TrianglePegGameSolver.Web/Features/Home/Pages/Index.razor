@inherits FluxorComponent
@page "/"
@page "/Solve"
@using TrianglePegGameSolver.Web.Features.PegBoard.Components
@using TrianglePegGameSolver.Web.Features.Home.Components
@using TrianglePegGameSolver.Application.Solver.Queries.SolvePegBoard
@using TrianglePegGameSolver.Domain
@using TrianglePegGameSolver.Web.Features.Home.Store
@using TrianglePegGameSolver.Web.Features.Home.Store.Actions

@inject IDispatcher _dispatcher
@inject IState<SolveState> _state

<PageTitle Title="Triangle Peg Game - Solve" />

<h1 class="text-3xl font-bold text-gray-900">
    Solve
</h1>
<h3 class="text-xl text-gray-900">
    Click any peg to show the solution
</h3>

@if (_state.Value.SolutionAttempted)
{
    <div class="my-2">
        <Button OnClick="Reset" Text="Reset"></Button>
    </div>
}
<div class="flex flex-col lg:flex-row">
    @if (_state.Value.IsLoading)
    {
        <div class="self-center my-6 lg:w-full lg:flex lg:justify-center">
            <LoadingSpinner></LoadingSpinner>
        </div>
    }
    else
    {
        if (_state.Value.SolutionAttempted)
        {
            if (_state.Value.FoundSolution)
            {
                <div class="w-full self-center lg:w-3/4">
                    <SolvedPegBoard></SolvedPegBoard>
                </div>
                <div class="lg:w-1/4">
                    <MoveList></MoveList>
                </div>
            }
            else
            {
                <div class="rounded-md bg-red-300 p-2 text-red-900 my-3 border-red-900 border-2">
                    <div>Failed to find solution!</div>
                </div>
            }

        }
        else
        {
            <div class="w-3/4 self-center">
                <SolvedPegBoard></SolvedPegBoard>
            </div>
        }

    }
</div>

@code
{

    private void Reset()
    {
        _dispatcher.Dispatch(new ResetAction());
    }

}