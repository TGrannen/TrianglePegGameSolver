@page "/"
@page "/Solve"
@using TrianglePegGameSolver.Web.Features.PegBoard.Components
@using TrianglePegGameSolver.Web.Features.Home.Components
@using MediatR
@using TrianglePegGameSolver.Application.Solver.Queries.SolvePegBoard
@using TrianglePegGameSolver.Domain
@using PegBoard = TrianglePegGameSolver.Domain.PegBoard

@inject IMediator _mediator

<h1 class="text-3xl font-bold text-gray-900">
    Solve
</h1>
<h3 class="text-xl text-gray-900">
    Click any peg to show the solution
</h3>

@if (_hasSolution)
{
    <Button OnClick="Reset" Text="Reset"></Button>
}

<div class="flex flex-col lg:flex-row">
    <div class="w-1/2 self-center lg:w-3/4">
        <SolvedPegBoard Board="_board" Move="_move" OnClick="PegClicked"></SolvedPegBoard>
    </div>
    <div class="lg:w-1/4">
        <MoveList Moves="_moves" StartingHole="_startingHole" MoveClick="x=>SetFromMove(x)"></MoveList>
    </div>
</div>

@code
{
    PegBoard _board = new PegBoard();
    List<PegMoveWithBoard> _moves = new List<PegMoveWithBoard>();
    PegMove _move = null;
    PegHole _startingHole = null;

    bool _hasSolution = false;

    private async Task PegClicked(PegHole hole)
    {
        if (!_hasSolution)
        {
            hole.Filled = false;
            _startingHole = hole;
            await SolveBoard();
        }
    }

    private void Reset()
    {
        _board = new PegBoard();
        _moves = new List<PegMoveWithBoard>();
        _move = null;
        _startingHole = null;
        _hasSolution = false;
    }

    private async Task SolveBoard()
    {
        var result = await _mediator.Send(new SolvePegBoardQuery { PegBoard = _board });
        _moves = result.Moves;
        _move = _moves.FirstOrDefault()?.Move;
        _hasSolution = true;
    }

    private void SetFromMove(PegMoveWithBoard move)
    {
        _board = move.Board;
        _move = move.Move;
    }

}