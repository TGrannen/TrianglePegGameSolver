@inherits FluxorComponent
@using TrianglePegGameSolver.Domain
@using TrianglePegGameSolver.Application.Solver.Queries.SolvePegBoard
@using TrianglePegGameSolver.Web.Features.Home.Store
@using TrianglePegGameSolver.Web.Features.Home.Store.Actions

@inject IDispatcher _dispatcher
@inject IState<SolveState> _state

<div>
    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-2">
        Moves
    </h3>
    <ul class="border border-gray-200 rounded-md divide-y divide-gray-200">
        @if (_state.Value.Moves != null && _state.Value.Moves.Any())
        {
            @foreach (var move in _state.Value.Moves.Select((x, i) => new { x.Move, MoveWithBoard = x, Index = i + 2 }))
            {
                <li class="pl-3 pr-4 py-3 flex items-center justify-between text-sm cursor-pointer select-none @BgClass(move.Index) hover:bg-gray-200" @onclick="x => MoveClicked(move.MoveWithBoard)">
                    <div class="w-0 flex-1 flex items-center">
                        <span>@(move.Index).</span>
                        <span class="ml-2 flex-1 w-0 truncate">
                            Move @move.Move.From.Number to @move.Move.To.Number
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@code
{

    private void MoveClicked(PegMoveWithBoard move)
    {
        _dispatcher.Dispatch(new MoveSelectedAction { Move = move });
    }

    private string BgClass(int i)
    {
        return i % 2 == 0 ? "" : "bg-gray-100";
    }
}