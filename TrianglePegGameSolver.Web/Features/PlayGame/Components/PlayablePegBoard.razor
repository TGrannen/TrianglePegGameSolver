@inherits FluxorComponent
@using TrianglePegGameSolver.Web.Features.PegBoard.Components
@using TrianglePegGameSolver.Web.Features.PegBoard.Models
@using TrianglePegGameSolver.Domain
@using TrianglePegGameSolver.Web.Features.PlayGame.Store

@inject IDispatcher _dispatcher
@inject IState<PlayGameState> _state

<label class="select-none cursor-pointer">
    <input type="checkbox" @onchange="args => { Check(args); }" />
    Show Numbers
</label>

<PegBoard Holes="GetSolvedHoleDetailList()" OnClick="PegClicked" ShowNumbers="_showNumbers"></PegBoard>

@code{

    private bool _showNumbers = false;

    private void PegClicked(PegHole hole)
    {
        if (!_state.Value.StartingHoleSelected)
        {
            _dispatcher.Dispatch(new SelectStartingHoleAction { PegHole = hole });
        }
        else
        {
            _dispatcher.Dispatch(new SelectPegAction { PegHole = hole });
        }
    }

    private List<PegHoleDetail> GetSolvedHoleDetailList()
    {
        return _state.Value.Board?.Holes.Select(x => new PegHoleDetail { Hole = x, Style = GetPegStyle(x) }).ToList();
    }

    private PegStyle GetPegStyle(PegHole hole)
    {
        var number = hole.Number;
        var fromHole = _state.Value.From;
        if (hole.Filled)
        {
            if (fromHole?.Number == number)
            {
                return PegStyle.Selected;
            }

            return PegStyle.Filled;
        }
        return PegStyle.Empty;
    }

    private void Check(ChangeEventArgs args)
    {
        _showNumbers = !_showNumbers;
    }

}