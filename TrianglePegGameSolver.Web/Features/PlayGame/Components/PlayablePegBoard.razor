@inherits FluxorComponent
@using TrianglePegGameSolver.Web.Features.PegBoard.Components
@using TrianglePegGameSolver.Web.Features.PegBoard.Models
@using TrianglePegGameSolver.Domain
@using TrianglePegGameSolver.Web.Features.PlayGame.Store

@inject IDispatcher _dispatcher
@inject IState<PlayGameState> _state

<label class=" select-none cursor-pointer inline-flex items-center mt-3">
    <input class="h-5 w-5 text-gray-600 rounded" type="checkbox" @bind="@ShowNumbers" />
    <span class="ml-2 text-gray-700"> Show Numbers</span>
</label>

<PegBoard Holes="GetSolvedHoleDetailList()" OnClick="PegClicked" ShowNumbers="@_state.Value.ShowPegNumbers"></PegBoard>

@code{

    private bool _showNumbers;

    public bool ShowNumbers
    {
        get => _showNumbers;
        set
        {
            _showNumbers = value;
            _dispatcher.Dispatch(new SetShowPegNumbersAction { ShowNumbers = _showNumbers });
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ShowNumbers = _state.Value.ShowPegNumbers;
    }

    private void PegClicked(PegHole hole)
    {
        if (!_state.Value.StartingHoleSelected)
        {
            _dispatcher.Dispatch(new SelectStartingHoleAction { PegHole = hole });
        }
        else
        {
            _dispatcher.Dispatch(new SelectPegAction { PegHole = hole });
        }
    }

    private List<PegHoleDetail> GetSolvedHoleDetailList()
    {
        return _state.Value.Board?.Holes.Select(x => new PegHoleDetail { Hole = x, Style = GetPegStyle(x) }).ToList();
    }

    private PegStyle GetPegStyle(PegHole hole)
    {
        var number = hole.Number;
        var fromHole = _state.Value.From;
        if (hole.Filled)
        {
            if (fromHole?.Number == number)
            {
                return PegStyle.Selected;
            }

            return PegStyle.Filled;
        }
        return PegStyle.Empty;
    }

}