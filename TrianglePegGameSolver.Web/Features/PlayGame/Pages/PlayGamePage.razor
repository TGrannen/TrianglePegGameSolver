@inherits FluxorComponent
@page "/Play"
@using TrianglePegGameSolver.Web.Features.PlayGame.Components
@using TrianglePegGameSolver.Web.Features.PlayGame.Store

@inject IDispatcher _dispatcher
@inject IState<PlayGameState> _state

<PageTitle Title="Triangle Peg Game - Play" />

<div class="flex justify-between">
    <h1 class="text-3xl font-bold text-gray-900">
        Play
    </h1>
    @if (_state.Value.Moves.Any())
    {
        <Button OnClick="UndoMove" Text="Undo"><ReplyIcon class="w-6 h-6"></ReplyIcon></Button>
    }
    @if (_state.Value.StartingHoleSelected)
    {
        <Button OnClick="Solve" Text="Solve"><CalculatorIcon class="w-6 h-6"></CalculatorIcon></Button>
        <Button OnClick="Restart" Text="Restart"><XCircleIcon class="w-6 h-6"></XCircleIcon></Button>
    }
</div>

@if (_state.Value.AvailableMoves == 0)
{
    <div class="flex justify-center my-2">
        <EmojiSadIcon class="w-6 h-6"></EmojiSadIcon><span>Oh no! You're out of moves!</span>
    </div>
}

<div class="flex justify-center">
    <div class="w-full lg:w-3/4">
        <PlayablePegBoard></PlayablePegBoard>
    </div>
</div>
@if (_showRestartModal)
{
    <RestartModal OnClose="OnRestartModalClose"></RestartModal>
}
@if (_showSolveModal)
{
    <SolveModal OnClose="OnSolveModalClose"></SolveModal>
}

@code
{
    private void UndoMove()
    {
        _dispatcher.Dispatch(new UndoMoveAction());
    }

    #region RestartModal

    private bool _showRestartModal = false;

    private void Restart()
    {
        _showRestartModal = true;
    }

    private void OnRestartModalClose(bool selection)
    {
        _showRestartModal = false;
        if (selection)
        {
            _dispatcher.Dispatch(new RestartAction());
        }
    }
    #endregion

    #region SolveModal

    private bool _showSolveModal = false;

    private void Solve()
    {
        _showSolveModal = true;
    }

    private void OnSolveModalClose(bool selection)
    {
        _showSolveModal = false;
        if (selection)
        {
            _dispatcher.Dispatch(new RestartAction());
        }
    }

    #endregion
}